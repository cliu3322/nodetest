{"version":3,"sources":["containers/Report/index.js"],"names":["props","generateCSV","e","SuperFetch","get","then","response","console","log","status","ws","XLSX","utils","json_to_sheet","data","wb","book_new","book_append_sheet","writeFile","notification","catch","generateJSON","setState","jsonData","generateChart","table","map","item","moment","month","format","prCount","cpCount","unshift","approvedAmount","tableByMonth","claim","createdAt","approved","ClaimInfoVisits","reduce","acc","curr","BillingInfos","accBill","currBill","billingRate","obj","index","findIndex","element","push","rejectedAmount","rejected","value","countByValue","total","length","greater","filter","piedata","countByType","policyType","policyTypeCount","gause","average","updatedAt","diff","perDay","gauge","test","or","state","bind","span","type","onClick","this","Title","level","src","width","height","chartType","loader","options","title","chartArea","hAxis","minValue","vAxis","legendToggle","redFrom","redTo","yellowFrom","yellowTo","minorTicks","is3D","Component"],"mappings":"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","file":"static/js/18.9f428c97.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Button, Row, Col, Typography } from 'antd';\r\nimport SuperFetch from '../../helpers/superFetch';\r\nimport notification from '@isomorphic/shared/isomorphic/components/Notification';\r\nimport XLSX from 'xlsx';\r\nimport ReactJson from 'react-json-view'\r\nimport { Chart } from \"react-google-charts\";\r\nimport moment from 'moment';\r\n//http://jsfiddle.net/asgallant/R8A8P/\r\n//https://developers.google.com/chart/interactive/docs/printing\r\nexport default class extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      jsonData: [],\r\n      data:null,\r\n      piedata:null,\r\n      gauge:[],\r\n    }\r\n    this.generateChart = this.generateChart.bind(this);\r\n  }\r\n  generateCSV = e => {\r\n    SuperFetch.get('report/csv')\r\n    .then(response => {\r\n      console.log('response', response)\r\n      if(response.status === 200) {\r\n        var ws = XLSX.utils.json_to_sheet(response.data);\r\n        var wb = XLSX.utils.book_new();\r\n        XLSX.utils.book_append_sheet(wb, ws, 'report');\r\n        XLSX.writeFile(wb, 'report.xlsb');\r\n        //console.log(response)\r\n      } else {\r\n        notification('error', \"Something wrong in retrieving CSV\" );\r\n      }\r\n    })\r\n    .catch(e => console.log(e))\r\n  }\r\n\r\n  generateJSON = e => {\r\n    SuperFetch.get('report/json')\r\n    .then(response => {\r\n      console.log('response', response)\r\n      if(response.status === 200) {\r\n        this.setState({\r\n          jsonData:response.data\r\n        });\r\n      } else {\r\n        notification('error', \"Something wrong in retrieving CSV\" );\r\n      }\r\n    })\r\n    .catch(e => console.log(e))\r\n  }\r\n  generateChart = e => {\r\n    SuperFetch.get('report/claimCount')\r\n    .then(response => {\r\n      console.log('response', response)\r\n      if(response.status === 200) {\r\n\r\n        var table = response.data.map(item => [moment(item.month).format('MM-YYYY'), item.prCount, item.cpCount])\r\n        table.unshift(['Month', 'pr Count', 'cp Count'])\r\n\r\n\r\n        this.setState({\r\n          data:table\r\n        });\r\n      } else {\r\n        notification('error', \"Something wrong in retrieving CSV\" );\r\n      }\r\n    })\r\n    .catch(e => console.log(e))\r\n  }\r\n  approvedAmount = e => {\r\n\r\n    //retrieve from original data\r\n    SuperFetch.get('report/USDApproved')\r\n    .then(response => {\r\n      console.log('response', response)\r\n      if(response.status === 200) {\r\n\r\n        var table = response.data.map(claim => {\r\n          return {\r\n            month:moment(claim.createdAt).format('MM-YYYY'),\r\n            approved:claim.ClaimInfoVisits.reduce((acc, curr) => {\r\n              //Get total approved from each visit\r\n              var billingApprovedTotal = curr.BillingInfos.reduce((accBill,currBill) => (accBill + currBill.approved), 0)\r\n              //Get acc and convert to USD\r\n              acc += billingApprovedTotal/curr.billingRate\r\n              return acc;\r\n            }, 0)}\r\n        })\r\n        var tableByMonth = table.reduce((acc, obj) => {\r\n\r\n          var index = acc.findIndex(element => element[0] === obj.month)\r\n          if (index < 0) {\r\n            acc.push([obj.month, obj.approved]);\r\n          } else {\r\n            acc[index][1] += obj.approved;\r\n          }\r\n\r\n          return acc;\r\n        }, [])\r\n        tableByMonth.unshift(['Month', 'USD total'])\r\n        this.setState({\r\n          data:tableByMonth\r\n        });\r\n      } else {\r\n        notification('error', \"Something wrong in retrieving CSV\" );\r\n      }\r\n    })\r\n    .catch(e => console.log(e))\r\n  }\r\n  rejectedAmount = e => {\r\n\r\n    //retrieve from original data\r\n    SuperFetch.get('report/USDRejected')\r\n    .then(response => {\r\n      console.log('response', response)\r\n      if(response.status === 200) {\r\n        var table = response.data.map(claim => {\r\n          return {\r\n            month:moment(claim.createdAt).format('MM-YYYY'),\r\n            rejected:claim.ClaimInfoVisits.reduce((acc, curr) => {\r\n              //Get total approved from each visit\r\n              var billingRejectedTotal = curr.BillingInfos.reduce((accBill,currBill) => (accBill + (currBill.value-currBill.approved)), 0)\r\n              //Get acc and convert to USD\r\n              acc += billingRejectedTotal/curr.billingRate\r\n              return acc;\r\n            }, 0)}\r\n        })\r\n\r\n        var tableByMonth = table.reduce((acc, obj) => {\r\n\r\n          var index = acc.findIndex(element => element[0] === obj.month)\r\n          if (index < 0) {\r\n            acc.push([obj.month, obj.rejected]);\r\n          } else {\r\n            acc[index][1] += obj.rejected;\r\n          }\r\n\r\n          return acc;\r\n        }, [])\r\n        tableByMonth.unshift(['Month', 'USD total'])\r\n        this.setState({\r\n          data:tableByMonth\r\n        });\r\n      } else {\r\n        notification('error', \"Something wrong in retrieving CSV\" );\r\n      }\r\n    })\r\n    .catch(e => console.log(e))\r\n  }\r\n  countByValue = e => {\r\n\r\n    //retrieve from original data\r\n    SuperFetch.get('report/USDApproved')\r\n    .then(response => {\r\n      console.log('response', response)\r\n      if(response.status === 200) {\r\n\r\n        var table = response.data.map(claim => {\r\n          return {\r\n            approved:claim.ClaimInfoVisits.reduce((acc, curr) => {\r\n              //Get total approved from each visit\r\n              var billingApprovedTotal = curr.BillingInfos.reduce((accBill,currBill) => (accBill + currBill.approved), 0)\r\n              //Get acc and convert to USD\r\n              acc += billingApprovedTotal/curr.billingRate\r\n              return acc;\r\n            }, 0)}\r\n        })\r\n        const total = table.length;\r\n        const greater = table.filter(item => item.approved>250).length\r\n\r\n        var data = []\r\n        data.push(['Amount','Count'])\r\n        data.push(['<=$250', total-greater])\r\n        data.push(['>$250', greater])\r\n\r\n        this.setState({\r\n          piedata:data\r\n        });\r\n      } else {\r\n        notification('error', \"Something wrong in retrieving CSV\" );\r\n      }\r\n    })\r\n    .catch(e => console.log(e))\r\n  }\r\n\r\n  countByType = e => {\r\n\r\n    //retrieve from original data\r\n    SuperFetch.get('report/approvedClaimedCountByType')\r\n    .then(response => {\r\n      if(response.status === 200) {\r\n\r\n        const data = response.data.map(item => [item.policyType,item.policyTypeCount])\r\n        data.unshift(['Type','Count'])\r\n        console.log(data)\r\n        this.setState({\r\n          piedata:data\r\n        });\r\n      } else {\r\n        notification('error', \"Something wrong in retrieving CSV\" );\r\n      }\r\n    })\r\n    .catch(e => console.log(e))\r\n  }\r\n\r\n  gause = e => {\r\n\r\n    //retrieve from original data\r\n    SuperFetch.get('report/turnaroundTime')\r\n    .then(response => {\r\n      console.log('response', response)\r\n      if(response.status === 200) {\r\n\r\n        const average = response.data.reduce((acc, curr) => acc += moment(curr.updatedAt).diff(moment(curr.createdAt), 'days'), 0)/response.data.length\r\n        const perDay = response.data.length/90\r\n\r\n        this.setState({\r\n          gauge: [\r\n            ['Label', 'Value'],\r\n            ['Turnaround', average],\r\n            ['Per Day', perDay],\r\n          ]\r\n        });\r\n      } else {\r\n        notification('error', \"Something wrong in retrieving CSV\" );\r\n      }\r\n    })\r\n    .catch(e => console.log(e))\r\n  }\r\n\r\n  test = e => {\r\n\r\n    //retrieve from original data\r\n    SuperFetch.get('report/test')\r\n    .then(response => {\r\n      console.log('report test', response)\r\n    })\r\n    .catch(e => console.log(e))\r\n\r\n    SuperFetch.get('test')\r\n    .then(response => {\r\n      console.log('test test', response)\r\n    })\r\n    .catch(e => console.log(e))\r\n\r\n\r\n    SuperFetch.get('claim/claims',{or: [{status: 'pe'}, {status: 're-pd'}]})\r\n    .then(response => {\r\n      console.log('claim/claims', response)\r\n    })\r\n    .catch(e => console.log(e))\r\n  }\r\n  render() {\r\n    return (\r\n      <>\r\n        <Row>\r\n          <Col span={4}>\r\n            <Button type=\"primary\" onClick={this.generateCSV}>Excel</Button>\r\n          </Col>\r\n          <Col span={4}>\r\n            <Button type=\"primary\" onClick={this.generateJSON}>Json</Button>\r\n          </Col>\r\n          <Col span={4}>\r\n            <Button type=\"primary\" onClick={this.generateChart}>Chart</Button>\r\n          </Col>\r\n          <Col span={4}>\r\n            <Button type=\"primary\" onClick={this.approvedAmount}>USD Approved</Button>\r\n          </Col>\r\n          <Col span={4}>\r\n            <Button type=\"primary\" onClick={this.rejectedAmount}>USD Rejected</Button>\r\n          </Col>\r\n          <Col span={4}>\r\n            <Button type=\"primary\" onClick={this.countByValue}>Approved Claims By value</Button>\r\n          </Col>\r\n          <Col span={4}>\r\n            <Button type=\"primary\" onClick={this.countByType}>Approved Claims By Type</Button>\r\n          </Col>\r\n          <Col span={4}>\r\n            <Button type=\"primary\" onClick={this.gause}>Gause</Button>\r\n          </Col>\r\n          <Col span={4}>\r\n            <Button type=\"primary\" onClick={this.test}>Test</Button>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Typography.Title level={4}>JSON:</Typography.Title>\r\n          <ReactJson src={this.state.jsonData}/>\r\n        </Row>\r\n        <Row>\r\n          <Typography.Title level={4}>Chart:</Typography.Title>\r\n          <Chart\r\n            width={300}\r\n            height={300}\r\n            chartType=\"ColumnChart\"\r\n            loader={<div>Loading Chart</div>}\r\n            data={this.state.data}\r\n            options={{\r\n              title: 'Claims Count',\r\n              chartArea: { width: '30%' },\r\n              hAxis: {\r\n                title: 'Month',\r\n                minValue: 0,\r\n              },\r\n              vAxis: {\r\n                title: 'Count',\r\n              },\r\n            }}\r\n            legendToggle\r\n          />\r\n          <Chart\r\n            width={400}\r\n            height={120}\r\n            chartType=\"Gauge\"\r\n            loader={<div>Loading Chart</div>}\r\n            data={this.state.gauge}\r\n            options={{\r\n              redFrom: 90,\r\n              redTo: 100,\r\n              yellowFrom: 75,\r\n              yellowTo: 90,\r\n              minorTicks: 5,\r\n            }}\r\n          />\r\n          <Chart\r\n            width={300}\r\n            height={300}\r\n            chartType=\"PieChart\"\r\n            loader={<div>Loading Chart</div>}\r\n            data={this.state.piedata}\r\n            options={{\r\n              title: 'Approved Claims Count: Split by Value',\r\n              // Just add this option\r\n              is3D: true,\r\n            }}\r\n            legendToggle\r\n          />\r\n\r\n        </Row>\r\n      </>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":""}